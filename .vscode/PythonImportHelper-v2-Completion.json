[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "telethon.types",
        "description": "telethon.types",
        "isExtraImport": true,
        "detail": "telethon.types",
        "documentation": {}
    },
    {
        "label": "UpdateNewMessage",
        "importPath": "telethon.types",
        "description": "telethon.types",
        "isExtraImport": true,
        "detail": "telethon.types",
        "documentation": {}
    },
    {
        "label": "PeerUser",
        "importPath": "telethon.types",
        "description": "telethon.types",
        "isExtraImport": true,
        "detail": "telethon.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "telethon.types",
        "description": "telethon.types",
        "isExtraImport": true,
        "detail": "telethon.types",
        "documentation": {}
    },
    {
        "label": "UpdateNewMessage",
        "importPath": "telethon.types",
        "description": "telethon.types",
        "isExtraImport": true,
        "detail": "telethon.types",
        "documentation": {}
    },
    {
        "label": "PeerUser",
        "importPath": "telethon.types",
        "description": "telethon.types",
        "isExtraImport": true,
        "detail": "telethon.types",
        "documentation": {}
    },
    {
        "label": "NewMessage",
        "importPath": "telethon.events",
        "description": "telethon.events",
        "isExtraImport": true,
        "detail": "telethon.events",
        "documentation": {}
    },
    {
        "label": "NewMessage",
        "importPath": "telethon.events",
        "description": "telethon.events",
        "isExtraImport": true,
        "detail": "telethon.events",
        "documentation": {}
    },
    {
        "label": "EventCommon",
        "importPath": "telethon.events.common",
        "description": "telethon.events.common",
        "isExtraImport": true,
        "detail": "telethon.events.common",
        "documentation": {}
    },
    {
        "label": "EventCommon",
        "importPath": "telethon.events.common",
        "description": "telethon.events.common",
        "isExtraImport": true,
        "detail": "telethon.events.common",
        "documentation": {}
    },
    {
        "label": "setuptools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setuptools",
        "description": "setuptools",
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "files_in_folder",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.bulk_handlers",
        "description": "build.lib.telethon_utils.bulk_handlers",
        "peekOfCode": "def files_in_folder(folder: str) -> list[str]:\n    path = \"\"\n    filenames: list[str] = []\n    for path, _, filenames in os.walk(folder):\n        break\n    return [f\"{path}/{filename}\" for filename in filenames]\nasync def phones_from_sessions_dir(dir: str) -> list[str]:\n    files = files_in_folder(dir)\n    return files\nasync def get_clients(sessions_dir: str, api_id: int, api_hash: str) -> ClientsList:",
        "detail": "build.lib.telethon_utils.bulk_handlers",
        "documentation": {}
    },
    {
        "label": "query_data_starts_with",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.event_filters",
        "description": "build.lib.telethon_utils.event_filters",
        "peekOfCode": "def query_data_starts_with(starts_with: str) -> Callable[[events.CallbackQuery.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.CallbackQuery.Event) -> bool:\n        return str(e.query.data.decode()).startswith(starts_with)   # pyright: ignore\n    return inner\ndef chat_message(chats_id: int) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id == chats_id\n    return inner\ndef message_from_chatslist(chat_ids: list[int]) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:",
        "detail": "build.lib.telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "chat_message",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.event_filters",
        "description": "build.lib.telethon_utils.event_filters",
        "peekOfCode": "def chat_message(chats_id: int) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id == chats_id\n    return inner\ndef message_from_chatslist(chat_ids: list[int]) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id in chat_ids\n    return inner",
        "detail": "build.lib.telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "message_from_chatslist",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.event_filters",
        "description": "build.lib.telethon_utils.event_filters",
        "peekOfCode": "def message_from_chatslist(chat_ids: list[int]) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id in chat_ids\n    return inner\ndef command_from_anyone(command: str) -> Callable[[events.NewMessage.Event], Coroutine[Any,Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        m = cast(str, e.message.message)    # pyright: ignore\n        return m.startswith(command)\n    return inner",
        "detail": "build.lib.telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "command_from_anyone",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.event_filters",
        "description": "build.lib.telethon_utils.event_filters",
        "peekOfCode": "def command_from_anyone(command: str) -> Callable[[events.NewMessage.Event], Coroutine[Any,Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        m = cast(str, e.message.message)    # pyright: ignore\n        return m.startswith(command)\n    return inner",
        "detail": "build.lib.telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "std_chat_id",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.extractors",
        "description": "build.lib.telethon_utils.extractors",
        "peekOfCode": "def std_chat_id(chat_id: int) -> int:\n    _id = str(chat_id)\n    if _id.startswith(\"-100\"):\n        _id = _id[3:]\n    if _id.startswith(\"-\"):\n        _id = _id[1:]\n    return int(_id)\ndef get_message_obj_from_message_event(event: NewMessage.Event) -> TelegramMessage:\n    \"\"\"Extract typed message object from TelegramMessage\"\"\"\n    orig_update = cast(UpdateNewMessage, event.original_update)",
        "detail": "build.lib.telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "get_message_obj_from_message_event",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.extractors",
        "description": "build.lib.telethon_utils.extractors",
        "peekOfCode": "def get_message_obj_from_message_event(event: NewMessage.Event) -> TelegramMessage:\n    \"\"\"Extract typed message object from TelegramMessage\"\"\"\n    orig_update = cast(UpdateNewMessage, event.original_update)\n    return cast(TelegramMessage, orig_update.message)\ndef get_user_id_from_message_event(event: NewMessage.Event) -> Optional[int]:\n    pure_message = get_message_obj_from_message_event(event)\n    if isinstance(pure_message.peer_id, PeerUser):\n        return pure_message.peer_id.user_id\n    return None\ndef get_client_from_event(event: EventCommon) -> TelegramClient:",
        "detail": "build.lib.telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "get_user_id_from_message_event",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.extractors",
        "description": "build.lib.telethon_utils.extractors",
        "peekOfCode": "def get_user_id_from_message_event(event: NewMessage.Event) -> Optional[int]:\n    pure_message = get_message_obj_from_message_event(event)\n    if isinstance(pure_message.peer_id, PeerUser):\n        return pure_message.peer_id.user_id\n    return None\ndef get_client_from_event(event: EventCommon) -> TelegramClient:\n    return cast(TelegramClient, event.client)",
        "detail": "build.lib.telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "get_client_from_event",
        "kind": 2,
        "importPath": "build.lib.telethon_utils.extractors",
        "description": "build.lib.telethon_utils.extractors",
        "peekOfCode": "def get_client_from_event(event: EventCommon) -> TelegramClient:\n    return cast(TelegramClient, event.client)",
        "detail": "build.lib.telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "files_in_folder",
        "kind": 2,
        "importPath": "telethon_utils.bulk_handlers",
        "description": "telethon_utils.bulk_handlers",
        "peekOfCode": "def files_in_folder(folder: str) -> list[str]:\n    path = \"\"\n    filenames: list[str] = []\n    for path, _, filenames in os.walk(folder):\n        break\n    return [f\"{path}/{filename}\" for filename in filenames]\nasync def phones_from_sessions_dir(dir: str) -> list[str]:\n    files = files_in_folder(dir)\n    return files\nasync def get_clients(sessions_dir: str, api_id: int, api_hash: str) -> ClientsList:",
        "detail": "telethon_utils.bulk_handlers",
        "documentation": {}
    },
    {
        "label": "query_data_starts_with",
        "kind": 2,
        "importPath": "telethon_utils.event_filters",
        "description": "telethon_utils.event_filters",
        "peekOfCode": "def query_data_starts_with(starts_with: str) -> Callable[[events.CallbackQuery.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.CallbackQuery.Event) -> bool:\n        return str(e.query.data.decode()).startswith(starts_with)   # pyright: ignore\n    return inner\ndef chat_message(chats_id: int) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id == chats_id\n    return inner\ndef message_from_chatslist(chat_ids: list[int]) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:",
        "detail": "telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "chat_message",
        "kind": 2,
        "importPath": "telethon_utils.event_filters",
        "description": "telethon_utils.event_filters",
        "peekOfCode": "def chat_message(chats_id: int) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id == chats_id\n    return inner\ndef message_from_chatslist(chat_ids: list[int]) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id in chat_ids\n    return inner",
        "detail": "telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "message_from_chatslist",
        "kind": 2,
        "importPath": "telethon_utils.event_filters",
        "description": "telethon_utils.event_filters",
        "peekOfCode": "def message_from_chatslist(chat_ids: list[int]) -> Callable[[events.NewMessage.Event], Coroutine[Any, Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        chat_id = cast(int, e.chat_id)  # pyright: ignore\n        return chat_id in chat_ids\n    return inner\ndef command_from_anyone(command: str) -> Callable[[events.NewMessage.Event], Coroutine[Any,Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        m = cast(str, e.message.message)    # pyright: ignore\n        return m.startswith(command)\n    return inner",
        "detail": "telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "command_from_anyone",
        "kind": 2,
        "importPath": "telethon_utils.event_filters",
        "description": "telethon_utils.event_filters",
        "peekOfCode": "def command_from_anyone(command: str) -> Callable[[events.NewMessage.Event], Coroutine[Any,Any, bool]]:\n    async def inner(e: events.NewMessage.Event) -> bool:\n        m = cast(str, e.message.message)    # pyright: ignore\n        return m.startswith(command)\n    return inner",
        "detail": "telethon_utils.event_filters",
        "documentation": {}
    },
    {
        "label": "std_chat_id",
        "kind": 2,
        "importPath": "telethon_utils.extractors",
        "description": "telethon_utils.extractors",
        "peekOfCode": "def std_chat_id(chat_id: int) -> int:\n    _id = str(chat_id)\n    if _id.startswith(\"-100\"):\n        _id = _id[3:]\n    if _id.startswith(\"-\"):\n        _id = _id[1:]\n    return int(_id)\ndef get_message_obj_from_message_event(event: NewMessage.Event) -> TelegramMessage:\n    \"\"\"Extract typed message object from TelegramMessage\"\"\"\n    orig_update = cast(UpdateNewMessage, event.original_update)",
        "detail": "telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "get_message_obj_from_message_event",
        "kind": 2,
        "importPath": "telethon_utils.extractors",
        "description": "telethon_utils.extractors",
        "peekOfCode": "def get_message_obj_from_message_event(event: NewMessage.Event) -> TelegramMessage:\n    \"\"\"Extract typed message object from TelegramMessage\"\"\"\n    orig_update = cast(UpdateNewMessage, event.original_update)\n    return cast(TelegramMessage, orig_update.message)\ndef get_user_id_from_message_event(event: NewMessage.Event) -> Optional[int]:\n    pure_message = get_message_obj_from_message_event(event)\n    if isinstance(pure_message.peer_id, PeerUser):\n        return pure_message.peer_id.user_id\n    return None\ndef get_client_from_event(event: EventCommon) -> TelegramClient:",
        "detail": "telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "get_user_id_from_message_event",
        "kind": 2,
        "importPath": "telethon_utils.extractors",
        "description": "telethon_utils.extractors",
        "peekOfCode": "def get_user_id_from_message_event(event: NewMessage.Event) -> Optional[int]:\n    pure_message = get_message_obj_from_message_event(event)\n    if isinstance(pure_message.peer_id, PeerUser):\n        return pure_message.peer_id.user_id\n    return None\ndef get_client_from_event(event: EventCommon) -> TelegramClient:\n    return cast(TelegramClient, event.client)",
        "detail": "telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "get_client_from_event",
        "kind": 2,
        "importPath": "telethon_utils.extractors",
        "description": "telethon_utils.extractors",
        "peekOfCode": "def get_client_from_event(event: EventCommon) -> TelegramClient:\n    return cast(TelegramClient, event.client)",
        "detail": "telethon_utils.extractors",
        "documentation": {}
    },
    {
        "label": "required_packages",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "required_packages = [\n    \"aiohttp\",\n]\nNAME = \"telethon_utils\"\nsetuptools.setup(\n    name=NAME,\n    version=\"0.1.0\",\n    author=\"Rehman Ali\",\n    author_email=\"rehmanali.9442289@gmail.com\",\n    description=\"Some helper utils for telethon\",",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "NAME = \"telethon_utils\"\nsetuptools.setup(\n    name=NAME,\n    version=\"0.1.0\",\n    author=\"Rehman Ali\",\n    author_email=\"rehmanali.9442289@gmail.com\",\n    description=\"Some helper utils for telethon\",\n    url=\"\",\n    packages=setuptools.find_packages(),\n    install_requires=required_packages,",
        "detail": "setup",
        "documentation": {}
    }
]